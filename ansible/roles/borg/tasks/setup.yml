---
- name: "Debug server {{ borg_server_item }}"
  debug:
    var: "hostvars[borg_server_item]"
    verbosity: 2

- name: "Verify '{{ borg_server_item }}'"
  assert:
    that:
      - "hostvars[borg_server_item] is defined"
      - "hostvars[borg_server_item].inventory_hostname_short"
    msg: "The node passed as a borg-repository doesn't seem to be a valid host in the inventory. 'borg_server_item'={{ borg_server_item }}"

- name: "@{{ hostvars[borg_server_item].inventory_hostname_short }} | Gather some facts"
  setup:
    gather_subset:
      - "!all"
      - "!any"
      - "min"
  delegate_to: "{{ borg_server_item }}"
  delegate_facts: True
  run_once: True
  when: ( borg_enabled|bool and borg_server_enabled|bool )

- name: "Generate ssh-key '{{ borg_client_sshkey_name }}'"
  user:
    name: "{{ borg_client_user }}"
    generate_ssh_key: yes
    ssh_key_bits: "{{ borg_client_sshkey_bits }}"
    ssh_key_file: "~{{ borg_client_user }}/.ssh/{{ borg_client_sshkey_name }}"
    ssh_key_comment: "{{ borg_client_user }}@{{ borg_server_user }} for borg"
    ssh_key_type: "rsa"
  register: user_ssh_key
  when: ( borg_enabled|bool and borg_server_enabled|bool )

- include_tasks: server.yml
  tags: [ "borg_server" ]

- name: "Setup [{{ borg_server_address }}]:{{ borg_server_port}} in .ssh/known-hosts"
  known_hosts:
    path: "~{{ borg_client_user }}/.ssh/known_hosts"
    name: "[{{ borg_server_address }}]:{{ borg_server_port}}"
    key: "[{{ borg_server_address }}]:{{ borg_server_port}} ssh-rsa {{ hostvars[borg_server_item].ansible_ssh_host_key_rsa_public }}"
  when: ( borg_enabled|bool and borg_server_enabled|bool )

- name: "Ensure configuration directory exists"
  file:
    path: "~{{ borg_client_user }}/.config/borg/"
    state: "directory"
    owner: "{{ borg_client_user }}"
    group: "{{ borg_client_user }}"
    mode: "0700"
  when: ( borg_enabled|bool and borg_server_enabled|bool )

- name: "Create configuration file"
  template:
    src: "client.conf.j2"
    dest: "~{{ borg_client_user }}/.config/borg/{{ hostvars[borg_server_item].inventory_hostname_short }}.conf"
    owner: "{{ borg_client_user }}"
    group: "{{ borg_client_user }}"
    mode: "0700"
  when: ( borg_enabled|bool and borg_server_enabled|bool )

- name: "Create default.conf symlink to '{{ groups.borg_servers[0]|d([]) }}.conf'"
  file:
    src: "{{ hostvars[borg_server_item].inventory_hostname_short }}.conf"
    dest: "~{{ borg_client_user }}/.config/borg/default.conf"
    owner: "{{ borg_client_user }}"
    group: "{{ borg_client_user }}"
    state: link
    force: yes
  when: ( borg_enabled|bool and borg_server_enabled|bool ) and
          borg_server_item == groups.borg_servers[0]

- include_tasks: facts.yml
  tags: [ "borg_facts" ]

- name: "Initiate borg-repository on {{ hostvars[borg_server_item].inventory_hostname_short }}"
  command: "borg-wrapper.sh init --encryption=keyfile-blake2"
  environment:
    - BCONF: "{{ hostvars[borg_server_item].inventory_hostname_short }}"
    - BORG_PASSPHRASE: ""
  args:
    creates: "~{{ borg_client_user }}/.config/borg/keys"
  register: borg_repo_init
  when:
    - ( borg_repo_fact.configured is defined and borg_repo_fact.configured )
    - ( borg_repo_fact.repository is not defined or
        borg_repo_fact.repository.id is not defined )

- name: Show what borg_repo_init says.
  debug:
    var: "borg_repo_init"
    verbosity: 1

- name: "Ensure borg-config permissions on client"
  file:
    path: "{{ item.path }}"
    state: "{{ item.state|d('directory') }}"
    owner: "{{ item.owner|d(borg_client_user) }}"
    group: "{{ item.group|d(borg_client_user) }}"
    mode: "{{ item.mode|d('0700') }}"
    recurse: "{{ item.recurse|d('no') }}"
  with_items:
    - path: "~{{ borg_client_user }}/.config/borg/"
    - path: "~{{ borg_client_user }}/.config/borg/security/"
    - path: "~{{ borg_client_user }}/.config/borg/keys/"
    - path: "{{ borg_repo_fact.encryption.keyfile }}"
      state: "file"
      mode: "0600"
  when:
    - ( borg_repo_fact.repository is defined and
        borg_repo_fact.repository.id is defined )

- when: borg_repo_fact.encryption.keyfile is defined
  tags: [ "borg_manager" ]
  become: False
  block:
    - include_tasks: manager.yml
  rescue:
    - debug:
        msg: >
          Something failed with saving the borg configuration
          and keys on '{{ borg_manager_hostÂ  }}'. However, this isn't strictly
          necessary for daily backup activities - only for key-backup and
          convenient.
